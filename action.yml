name: 'Merge coverage reports'
author: 'selfagency'
description: 'Merge Istanbul coverage reports'
branding:
  icon: 'git-merge'
  color: 'green'
inputs:
  coverage-reports:
    description: 'Path to coverage reports'
    type: string
    required: true
  output-folder:
    description: 'Where to output results'
    type: string
    required: true
  formats:
    description: 'Comma-separated list of formats to output'
    type: string
    required: true
outputs:
  summary:
    description: 'Coverage summary'
    value: steps.merge-coverage.outputs.summary
  json:
    description: 'JSON coverage summary'
    value: steps.merge-coverage.outputs.json
runs:
  using: 'composite'
  steps:
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      shell: bash
      run: npm ci

    - name: Get coverage files
      id: get-coverage-files
      uses: tj-actions/glob@v13.1
      with:
        working-directory: ${{ inputs.coverage-reports }}
        separator: ','
        files: |
          **/*.json

    - name: Merge coverage reports
      id: merge-coverage
      uses: actions/github-script@v6
      with:
        script: |
          const istanbul = require('${{ github.workspace }}/node_modules/istanbul-lib-coverage');
          const {readFile, writeFile} = require('fs/promises');
          const coverageDir = '${{ inputs.coverage-reports }}';
          const outputDir = '${{ inputs.output-folder }}';
          const coverageFiles = '${{ steps.get-coverage-files.outputs.paths }}'.split(',');

          if (coverageFiles.length) {
            const map = istanbul.createCoverageMap({});
            for (const file of coverageFiles) {
              core.debug(file);
              if (file.endsWith('coverage-final.json')) {
                const data = await readFile(`${coverageDir}/${file}`, 'utf8');
                core.debug(data);
                map.merge(JSON.parse(data));
              }
            }

            core.debug(`Merged reports: ${JSON.stringify(map)}`);
            await io.mkdirP(outputDir);
            await writeFile(`${outputDir}/coverage-final.json`, JSON.stringify(map));
          } else {
            core.notice('No coverage files found');
            core.setOutput('skip', true);
          }

    - name: Configure reporters
      id: configure-reporters
      uses: actions/github-script@v6
      if: ${{ !steps.merge-coverage.outputs.skip }}
      with:
        script: |
          const reporters = '${{ inputs.formats }}'.split(',');
          let reporterConfig = '';
          reporters.forEach(reporter => {
            reporterConfig += `--reporter ${reporter} `;
          });
          core.setOutput('reporters', reporterConfig);

    - name: Output coverage reports
      shell: bash
      if: ${{ !steps.merge-coverage.outputs.skip }}
      run: |
        ${{ github.workspace }}/node_modules/.bin/nyc report --reporter json-summary --reporter text-summary ${{ steps.configure-reporters.outputs.reporters }} --reportDir '${{ inputs.output-folder }}' --tempDir '${{ github.workspace}}/.nyc_output'
        echo "::set-output name=json::$(cat ${{ inputs.output-folder }}/coverage-summary.json)"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v2
      if: ${{ !steps.merge-coverage.outputs.skip }}
      with:
        name: coverage-reports
        path: ${{ inputs.output-folder }}
